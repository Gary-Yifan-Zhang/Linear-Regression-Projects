geom_point(size = 2) +
geom_point(data = high_residuals_excl, aes(color = "|r*|>3"), size = 4) +
geom_text(data = high_residuals_excl, aes(label = Kommun), vjust = 2, color = "blue", size = 3) +
geom_hline(yintercept = c(sqrt(qnorm(0.75)), sqrt(2))) +
geom_hline(yintercept = sqrt(3), linetype = "dashed") +
labs(title = "sqrt(|r*|) vs fitted values",
subtitle = "Analysis of variance stabilization",
caption = "Reference lines at y = sqrt(0.75 quantile of normal), sqrt(2), sqrt(3)") +
theme_minimal() +
theme(text = element_text(size = 14),
legend.position = "bottom") +
scale_color_manual(values = c("|r*|>3" = "red"))
# summary & confint of both models
summary(kommuner_excl_lm)
confint(kommuner_excl_lm)
summary(model_2e)
confint(model_2e)
# prepare models for stepwise selection
model_null <- lm(log(PM10) ~ 1, data = newdata)
model_null_sum <- summary(model_null)
model_1b <- lm(log(PM10) ~ log(Vehicles), data = newdata)
model_1b_sum <- summary(model_1b)
model_2c <- lm(log(PM10)~ log(Vehicles) + NewParts, data=newdata)
model_2c_sum <- summary(model_2c)
model_3d <- update(model_2e, data = newdata)
model_3d_sum <- summary(model_3d)
# AIC stepwise selection
step_model_aic <- step(model_1b,
scope = list(lower = model_null, upper = model_3d),
direction = "both",
trace = TRUE,  # trace=TRUE detail information for every steps
k = 2)  # k=2 means using AIC
summary(step_model_aic)
# BIC stepwise selection
step_model_bic <- step(model_1b,
scope = list(lower = model_null, upper = model_3d),
direction = "both",
trace = TRUE,
k =  log(nobs(model_3d)))  # BIC
summary(step_model_bic)
# Gathering statistics for each model
model_stats <- function(model) {
data.frame(
Beta_Parameters = length(coef(model)),  # Number of beta parameters
Residual_SD = sigma(model),  # Residual Standard Deviation
R_Squared = summary(model)$r.squared,  # R-squared
Adjusted_R_Squared = summary(model)$adj.r.squared,  # Adjusted R-squared
AIC = AIC(model),  # AIC
BIC = BIC(model)  # BIC
)
}
# Apply function to each model and combine results
model_comparison <- data.frame(
Model = c("Null", "Model 1(b)", "Model 2(c)", "Model 3(d)", "AIC Model", "BIC Model"),
rbind(
model_stats(model_null),
model_stats(model_1b),
model_stats(model_2c),
model_stats(model_3d),
model_stats(step_model_aic),
model_stats(step_model_bic)
)
)
# Print the comparison table
print(model_comparison)
remove_municipalities <- c("0481 Oxelösund", "1082 Karlshamn", "0861 Mönsterås",
"2523 Gällivare", "2514 Kalix", "2584 Kiruna",
"1480 Göteborg", "1761 Hammarö", "1484 Lysekil",
"1494 Lidköping", "1882 Askersund", "2284 Örnsköldsvik",
"0319 Älvkarleby", "1460 Bengtsfors",  "1781 Kristinehamn",
"2262 Timrå",  "0980 Gotland", "1272 Bromölla",
"1885 Lindesberg", "1764 Grums")
#remove_municipalities <- c("0481 Oxelösund", "1082 Karlshamn", "0861 Mönsterås",
#                           "2523 Gällivare", "1480 Göteborg", "2584 Kiruna")
newdata <- kommuner %>%
filter(!Kommun %in% remove_municipalities)
kommuner_excl_lm <- update(model_2e, data = newdata)
kommuner_pred <- mutate(newdata,
yhat = predict(kommuner_excl_lm),
r = rstudent(kommuner_excl_lm),
v = hatvalues(kommuner_excl_lm),
D = cooks.distance(kommuner_excl_lm))
kommuner_pred_excl <- mutate(
kommuner_pred,
df0 = dfbetas(kommuner_excl_lm)[, "(Intercept)"],
df1 = dfbetas(kommuner_excl_lm)[, "log(Vehicles)"],
df2 = dfbetas(kommuner_excl_lm)[, "log(Higheds)"],
df3 = dfbetas(kommuner_excl_lm)[, "Children"],
df4 = dfbetas(kommuner_excl_lm)[, "log(Income)"],
df5 = dfbetas(kommuner_excl_lm)[, "log(GRP)"],
fit = predict(kommuner_excl_lm),
r = rstudent(kommuner_excl_lm),
D = cooks.distance(kommuner_excl_lm))
# Get municipality with high residuals
high_residuals_excl <- filter(kommuner_pred_excl, abs(r) > 3)
# Plot sqrt(|r*|) against fitted values and label the points where |r*| > 3.
ggplot(kommuner_pred_excl, aes(x = fit, y = sqrt(abs(r)))) +
geom_point(size = 2) +
geom_point(data = high_residuals_excl, aes(color = "|r*|>3"), size = 4) +
geom_text(data = high_residuals_excl, aes(label = Kommun), vjust = 2, color = "blue", size = 3) +
geom_hline(yintercept = c(sqrt(qnorm(0.75)), sqrt(2))) +
geom_hline(yintercept = sqrt(3), linetype = "dashed") +
labs(title = "sqrt(|r*|) vs fitted values",
subtitle = "Analysis of variance stabilization",
caption = "Reference lines at y = sqrt(0.75 quantile of normal), sqrt(2), sqrt(3)") +
theme_minimal() +
theme(text = element_text(size = 14),
legend.position = "bottom") +
scale_color_manual(values = c("|r*|>3" = "red"))
# summary & confint of both models
summary(kommuner_excl_lm)
confint(kommuner_excl_lm)
summary(model_2e)
confint(model_2e)
# prepare models for stepwise selection
model_null <- lm(log(PM10) ~ 1, data = newdata)
model_null_sum <- summary(model_null)
model_1b <- lm(log(PM10) ~ log(Vehicles), data = newdata)
model_1b_sum <- summary(model_1b)
model_2c <- lm(log(PM10)~ log(Vehicles) + NewParts, data=newdata)
model_2c_sum <- summary(model_2c)
model_3d <- update(model_2e, data = newdata)
model_3d_sum <- summary(model_3d)
# AIC stepwise selection
step_model_aic <- step(model_1b,
scope = list(lower = model_null, upper = model_3d),
direction = "both",
trace = TRUE,  # trace=TRUE detail information for every steps
k = 2)  # k=2 means using AIC
summary(step_model_aic)
# BIC stepwise selection
step_model_bic <- step(model_1b,
scope = list(lower = model_null, upper = model_3d),
direction = "both",
trace = TRUE,
k =  log(nobs(model_3d)))  # BIC
summary(step_model_bic)
# Gathering statistics for each model
model_stats <- function(model) {
data.frame(
Beta_Parameters = length(coef(model)),  # Number of beta parameters
Residual_SD = sigma(model),  # Residual Standard Deviation
R_Squared = summary(model)$r.squared,  # R-squared
Adjusted_R_Squared = summary(model)$adj.r.squared,  # Adjusted R-squared
AIC = AIC(model),  # AIC
BIC = BIC(model)  # BIC
)
}
# Apply function to each model and combine results
model_comparison <- data.frame(
Model = c("Null", "Model 1(b)", "Model 2(c)", "Model 3(d)", "AIC Model", "BIC Model"),
rbind(
model_stats(model_null),
model_stats(model_1b),
model_stats(model_2c),
model_stats(model_3d),
model_stats(step_model_aic),
model_stats(step_model_bic)
)
)
# Print the comparison table
print(model_comparison)
summary(step_model_bic)
summary(step_model_aic)
kommuner_pred <- mutate(kommuner,
yhat_linear = predict(model_linear_3a),
yhat = predict(model_2e),
r = rstudent(model_2e),
v = hatvalues(model_2e),
D = cooks.distance(model_2e))
# with 1/n and 2(p+1)/n horizontal lines:
# p+1 =
pplus1 <- length(model_2e$coefficients)
n <- nobs(model_2e)
# Get top leverage
top_leverage <- kommuner_pred %>%
arrange(desc(v)) %>%
slice(1:6)
ggplot(kommuner_pred, aes(x = yhat, y = v)) +
#  facet_wrap(~NewParts) +
geom_point(size = 2)  +
geom_point(data = top_leverage, aes(x = yhat, y = v), color = "red", size = 3) +
geom_text(data = top_leverage, aes(x = yhat, y = v, label = Kommun), vjust = -1, color = "blue") +
geom_hline(yintercept = 1/n) +
geom_hline(yintercept = 2*pplus1/n, color = "red") +
labs(title = "Kommuner: leverage vs predictor",
caption = "y = 1/n (black) and 2(p+1)/n (red)",
color = "Highlight") +
theme(legend.position = "bottom",
text = element_text(size = 16))
# define columns with interested variables
columns_interest <- c(5, 7, 9, 10, 11)
column_names <- names(kommuner)[columns_interest]
# plot all the combinations of x-variables
plot_list <- list()
for (i in seq_along(column_names)) {
for (j in seq_along(column_names)) {
if (i < j) {
p <- ggplot(kommuner, aes_string(x = column_names[i], y = column_names[j])) +
geom_point() +
facet_wrap(~NewParts) +
geom_point(data = top_leverage, aes_string(x = column_names[i], y = column_names[j]), color = "red") +
geom_text(data = top_leverage, aes_string(x = column_names[i], y = column_names[j], label = "Kommun"), vjust = -1.5, color = "blue", size = 3)
plot_list[[length(plot_list) + 1]] <- p
}
}
}
# use gridExtra to arrange this plots
do.call(gridExtra::grid.arrange, c(plot_list, ncol = length(column_names) - 1))
for (p in plot_list) {
print(p)
# ggsave(filename = paste0("path/to/save/plot_", plot_count, ".png"), plot = p, width = 10, height = 8)
}
################################################################################
# 3(b). Cook’s distance.
f1.kommuner <- pplus1
f2.kommuner <- model_2e$df.residual
cook.limit.kommuner <- qf(0.1, f1.kommuner, f2.kommuner)
top_cooks <- kommuner_pred %>%
arrange(desc(D)) %>%
slice(1:6)
ggplot(kommuner_pred, aes(x = yhat, y = D)) +
geom_point(size = 3) +
geom_point(data = top_cooks, color = "red", size = 4) +
geom_text(data = top_cooks, aes(label = Kommun), vjust = -1, color = "blue") +
geom_hline(yintercept = cook.limit.kommuner, color = "blue") +
geom_hline(yintercept = 4/n, linetype = 2, color = "red") +
xlab("Fitted values") +
ylab("D_i") +
labs(title = "Kommuner: Cook's D",
caption = "4/n (dashed), F_0.5, p+1, n-(p+1) (solid)",
color = "Highlight") +
theme(text = element_text(size = 18))
# DFBETAS
head(dfbetas(model_2e))
dfbetas_values <- dfbetas(model_2e)
max_dfbetas_indices <- apply(dfbetas_values, 2, which.max)
# Get the name of these municipalities
influential_municipalities <- kommuner_pred$Kommun[max_dfbetas_indices]
# Plot log(PM10) vs variables, maybe we need to change the β-parameter
# model_2e <- lm(log(PM10)~log(Vehicles)+log(Higheds)+Children+log(Income)+log(GRP)+NewParts, data=kommuner)
independent_vars <- c("log(Vehicles)", "log(Higheds)", "Children", "log(Income)", "log(GRP)")
for (var in independent_vars) {
ggplot(kommuner_pred, aes_string(x = var, y = "log(PM10)")) +
geom_point() +
geom_point(data = top_cooks, color = "red", size = 4) +
geom_text(data = top_cooks, aes(label = Kommun), vjust = -1.5, color = "blue") +
xlab(paste(var, "(1000/capita)")) +
ylab("log(PM10) (g)") +
labs(title = "Influence of Municipalities on PM10",
subtitle = paste("Red points indicate municipalities with significant influence on beta parameters for", var)) +
theme(text = element_text(size = 16))
print(ggplot2::last_plot())  # plot all the vars
}
kommuner_pred_DFBETAS <- mutate(
kommuner_pred,
df0 = dfbetas(model_2e)[, "(Intercept)"],
df1 = dfbetas(model_2e)[, "log(Vehicles)"],
df2 = dfbetas(model_2e)[, "log(Higheds)"],
df3 = dfbetas(model_2e)[, "Children"],
df4 = dfbetas(model_2e)[, "log(Income)"],
df5 = dfbetas(model_2e)[, "log(GRP)"],
fit = predict(model_2e),
r = rstudent(model_2e),
D = cooks.distance(model_2e))
top_cooks <- kommuner_pred_DFBETAS %>%
arrange(desc(D)) %>%
slice(1:6)
highlightshapes <- c("Cook's D>0.1" = 24)
highlightcolors <- c("|r*|>3" = "red",
"length>200" = "magenta",
"all data" = "orange",
"excl.length>200" = "blue")
# Top influential municipalities in DFBETAS
top_influential <- kommuner_pred_DFBETAS %>%
arrange(desc(abs(df2))) %>%
arrange(desc(abs(df2))) %>%
slice(1:6)
# Change the y axis into df0 ~ df5, check if the resulting plot
# is the same as the previous plot of log(PM10) vs variables.
ggplot(kommuner_pred_DFBETAS, aes(x = fit, y = df5)) +
geom_point(size = 2) +
geom_point(data = filter(kommuner_pred_DFBETAS, abs(r) > 3),
aes(color = "|r*|>3"), size = 3) +
geom_point(data = filter(kommuner_pred_DFBETAS, D > 0.1),
aes(shape = "Cook's D>0.1"), size = 3) +
geom_point(data = top_cooks, color = "green", size = 4) +
geom_text(data = top_cooks, aes(label = Kommun), vjust = -1.5, color = "blue") +
geom_hline(yintercept = 0) +
geom_hline(yintercept = sqrt(cook.limit.kommuner) * c(-1, 1), color = "red") +
geom_hline(yintercept = 2 / sqrt(n) * c(-1, 1), color = "red", linetype = "dashed") +
ylab("DFBETAS for log(GRP)") +
xlab("Fitted values") +
labs(title = "Impact on the Intercept by Municipality",
subtitle = "Highlighting municipalities with significant influence",
caption = "Red lines indicate critical values for influence") +
theme(text = element_text(size = 18),
legend.position = "bottom") +
scale_color_manual(values = highlightcolors) +
scale_shape_manual(values = highlightshapes)
################################################################################
# 3(c). Studentized residuals.
filter(kommuner_pred_DFBETAS, abs(r) > 3)
top_cooks <- kommuner_pred_DFBETAS %>%
arrange(desc(D)) %>%
slice(1:6)
# Plot studentized residuals vs fitted values
ggplot(kommuner_pred_DFBETAS, aes(x = fit, y = r)) +
geom_point(size = 2) +  # 绘制所有点
geom_point(data = top_cooks, aes(color = "Top Cook's D"), size = 4) +  # 突出显示Top Cook's D的点
geom_text(data = top_cooks, aes(label = Kommun), vjust = -1.5, color = "red") +  # 为Top Cook's D的点标注城市名
geom_point(data = filter(kommuner_pred_DFBETAS, abs(r) > 3 & !(Kommun %in% top_cooks$Kommun)),
aes(color = "|r*|>3"), size = 3) +  # 突出显示abs(r) > 3的点
geom_text(data = filter(kommuner_pred_DFBETAS, abs(r) > 3),
aes(label = Kommun), vjust = 1.5, color = "blue", size = 3) +  # 为abs(r) > 3的点标注城市名
geom_hline(yintercept = 0) +
geom_hline(yintercept = c(-2, 2)) +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
labs(title = "Studentized residuals vs fitted values",
subtitle = "Highlighting municipalities with high influence",
caption = "Horizontal lines at y = ±2, ±3",
color = "Highlight") +
theme_minimal() +
theme(text = element_text(size = 14),
legend.position = "bottom") +
scale_color_manual(values = c("Top Cook's D" = "red", "|r*|>3" = "blue"))
high_residuals <- filter(kommuner_pred_DFBETAS, abs(r) > 3)
# Plot sqrt(|r*|) against fitted values and label the points where |r*| > 3.
ggplot(kommuner_pred_DFBETAS, aes(x = fit, y = sqrt(abs(r)))) +
geom_point(size = 2) +
geom_point(data = high_residuals, aes(color = "|r*|>3"), size = 4) +
geom_text(data = high_residuals, aes(label = Kommun), vjust = 2, color = "blue", size = 3) +
geom_hline(yintercept = c(sqrt(qnorm(0.75)), sqrt(2))) +
geom_hline(yintercept = sqrt(3), linetype = "dashed") +
labs(title = "sqrt(|r*|) vs fitted values",
subtitle = "Analysis of variance stabilization",
caption = "Reference lines at y = sqrt(0.75 quantile of normal), sqrt(2), sqrt(3)") +
theme_minimal() +
theme(text = element_text(size = 14),
legend.position = "bottom") +
scale_color_manual(values = c("|r*|>3" = "red"))
remove_municipalities <- c("0481 Oxelösund", "1082 Karlshamn", "0861 Mönsterås",
"2523 Gällivare", "2514 Kalix", "2584 Kiruna",
"1480 Göteborg", "1761 Hammarö", "1484 Lysekil",
"1494 Lidköping", "1882 Askersund", "2284 Örnsköldsvik",
"0319 Älvkarleby", "1460 Bengtsfors",  "1781 Kristinehamn",
"2262 Timrå",  "0980 Gotland", "1272 Bromölla",
"1885 Lindesberg", "1764 Grums")
#remove_municipalities <- c("0481 Oxelösund", "1082 Karlshamn", "0861 Mönsterås",
#                           "2523 Gällivare", "1480 Göteborg", "2584 Kiruna")
newdata <- kommuner %>%
filter(!Kommun %in% remove_municipalities)
kommuner_excl_lm <- update(model_2e, data = newdata)
kommuner_pred <- mutate(newdata,
yhat = predict(kommuner_excl_lm),
r = rstudent(kommuner_excl_lm),
v = hatvalues(kommuner_excl_lm),
D = cooks.distance(kommuner_excl_lm))
kommuner_pred_excl <- mutate(
kommuner_pred,
df0 = dfbetas(kommuner_excl_lm)[, "(Intercept)"],
df1 = dfbetas(kommuner_excl_lm)[, "log(Vehicles)"],
df2 = dfbetas(kommuner_excl_lm)[, "log(Higheds)"],
df3 = dfbetas(kommuner_excl_lm)[, "Children"],
df4 = dfbetas(kommuner_excl_lm)[, "log(Income)"],
df5 = dfbetas(kommuner_excl_lm)[, "log(GRP)"],
fit = predict(kommuner_excl_lm),
r = rstudent(kommuner_excl_lm),
D = cooks.distance(kommuner_excl_lm))
# Get municipality with high residuals
high_residuals_excl <- filter(kommuner_pred_excl, abs(r) > 3)
# Plot sqrt(|r*|) against fitted values and label the points where |r*| > 3.
ggplot(kommuner_pred_excl, aes(x = fit, y = sqrt(abs(r)))) +
geom_point(size = 2) +
geom_point(data = high_residuals_excl, aes(color = "|r*|>3"), size = 4) +
geom_text(data = high_residuals_excl, aes(label = Kommun), vjust = 2, color = "blue", size = 3) +
geom_hline(yintercept = c(sqrt(qnorm(0.75)), sqrt(2))) +
geom_hline(yintercept = sqrt(3), linetype = "dashed") +
labs(title = "sqrt(|r*|) vs fitted values",
subtitle = "Analysis of variance stabilization",
caption = "Reference lines at y = sqrt(0.75 quantile of normal), sqrt(2), sqrt(3)") +
theme_minimal() +
theme(text = element_text(size = 14),
legend.position = "bottom") +
scale_color_manual(values = c("|r*|>3" = "red"))
# summary & confint of both models
summary(kommuner_excl_lm)
confint(kommuner_excl_lm)
summary(model_2e)
confint(model_2e)
# prepare models for stepwise selection
model_null <- lm(log(PM10) ~ 1, data = newdata)
model_null_sum <- summary(model_null)
model_1b <- lm(log(PM10) ~ log(Vehicles), data = newdata)
model_1b_sum <- summary(model_1b)
model_2c <- lm(log(PM10)~ log(Vehicles) + NewParts, data=newdata)
model_2c_sum <- summary(model_2c)
model_3d <- update(model_2e, data = newdata)
model_3d_sum <- summary(model_3d)
# AIC stepwise selection
step_model_aic <- step(model_1b,
scope = list(lower = model_null, upper = model_3d),
direction = "both",
trace = TRUE,  # trace=TRUE detail information for every steps
k = 2)  # k=2 means using AIC
summary(step_model_aic)
# BIC stepwise selection
step_model_bic <- step(model_1b,
scope = list(lower = model_null, upper = model_3d),
direction = "both",
trace = TRUE,
k =  log(nobs(model_3d)))  # BIC
summary(step_model_bic)
# Gathering statistics for each model
model_stats <- function(model) {
data.frame(
Beta_Parameters = length(coef(model)),  # Number of beta parameters
Residual_SD = sigma(model),  # Residual Standard Deviation
R_Squared = summary(model)$r.squared,  # R-squared
Adjusted_R_Squared = summary(model)$adj.r.squared,  # Adjusted R-squared
AIC = AIC(model),  # AIC
BIC = BIC(model)  # BIC
)
}
# Apply function to each model and combine results
model_comparison <- data.frame(
Model = c("Null", "Model 1(b)", "Model 2(c)", "Model 3(d)", "AIC Model", "BIC Model"),
rbind(
model_stats(model_null),
model_stats(model_1b),
model_stats(model_2c),
model_stats(model_3d),
model_stats(step_model_aic),
model_stats(step_model_bic)
)
)
# Print the comparison table
print(model_comparison)
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" | Coastal == "Yes") +
2*as.numeric(Part == "Svealand" & Coastal == "No") +
3*as.numeric(Part == "Norrland" & Coastal == "No"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo", "NorrlandNo"))
test_model <- lm(log(PM10)~ log(Vehicles) + NewParts, data=kommuner)
summary(test_model)
anova(test_model,model_lev)
summary(test_model)
anova(test_model,model_lev)
confint(test_model)
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" & Coastal == "Yes") +
2*as.numeric(Part == "Svealand" & Coastal == "No") +
3*as.numeric(Part == "Norrland" & Coastal == "No"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo", "NorrlandNo"))
test_model <- lm(log(PM10)~ log(Vehicles) + NewParts, data=kommuner)
summary(test_model)
anova(test_model,model_lev)
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" | Coastal == "Yes") +
2*as.numeric(Part == "Svealand" |& Coastal == "No") +
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" | Coastal == "Yes") +
2*as.numeric(Part == "Svealand" | Coastal == "No") +
3*as.numeric(Part == "Norrland" & Coastal == "No"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo", "NorrlandNo"))
test_model <- lm(log(PM10)~ log(Vehicles) + NewParts, data=kommuner)
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" | Coastal == "Yes") +
2*as.numeric(Part == "Svealand" | Coastal == "No") +
3*as.numeric(Part == "Norrland" & Coastal == "No"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo", "NorrlandNo"))
# 2(c). #
kommuner <- mutate(kommuner, Coastal = relevel(Coastal,"Yes"))
model_lev <- lm(log(PM10) ~ log(Vehicles) + Coastal*Part, data=kommuner)
confint(model_lev)
summary(model_lev)
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" | Coastal == "Yes") +
2*as.numeric(Part == "Svealand" | Coastal == "No") +
3*as.numeric(Part == "Norrland" & Coastal == "No"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo", "NorrlandNo"))
test_model <- lm(log(PM10)~ log(Vehicles) + NewParts, data=kommuner)
# load data
kommuner <- read_excel("Data/kommuner.xlsx")
summary(kommuner)
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" | Coastal == "Yes") +
2*as.numeric(Part == "Svealand" | Coastal == "No") +
3*as.numeric(Part == "Norrland" & Coastal == "No"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo", "NorrlandNo"))
test_model <- lm(log(PM10)~ log(Vehicles) + NewParts, data=kommuner)
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" | Coastal == "Yes") +
2*as.numeric(Part == "Svealand" & Coastal == "No") +
3*as.numeric(Part == "Norrland" & Coastal == "No"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo", "NorrlandNo"))
kommuner <-
mutate(kommuner, NewParts =
as.numeric(Part == "Gotaland" | Coastal == "Yes") +
2*as.numeric(Part == "Svealand" & Coastal == "No") +
3*as.numeric(Part == "Norrland" & Coastal == "No"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo", "NorrlandNo"))
kommuner$NewParts <- factor(kommuner$NewParts, labels = c("GotalandYes", "SvealandNo",
"NorrlandNo"))
